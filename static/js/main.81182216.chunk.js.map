{"version":3,"sources":["datatable/index.jsx","App.js","index.js"],"names":["Datatable","dataa","columns","Object","keys","className","cellPadding","cellSpacing","map","heading","index","row","column","name","App","useState","id","origin","Life_span","Description","Temperament","data","setData","query","setQuery","searchColumns","setSearchColumns","isLoading","setIsLoading","isError","setIsError","useEffect","a","axios","get","process","REACT_APP_API_kEY","info","result","datainfo","catData","push","life_span","description","temperament","fetchData","rows","type","placeholder","value","onChange","event","target","checked","includes","e","prev","filter","sc","some","toString","toLowerCase","indexOf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA6BeA,EAxBG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACbC,EAAUD,EAAM,IAAME,OAAOC,KAAKH,EAAM,IAE9C,OACE,wBAAOI,UAAU,YAAYC,YAAa,EAAGC,YAAa,EAA1D,UACE,gCACE,6BACGN,EAAM,IACLC,EAAQM,KAAI,SAACC,EAASC,GAAV,OAAoB,6BAAiBD,GAARC,UAG/C,gCACGT,EAAMO,KAAI,SAACG,GAAD,OACT,6BACGT,EAAQM,KAAI,SAACI,GAAD,OACX,6BAAKD,EAAIC,SAFJD,EAAIE,eCwGRC,MArHf,WACE,MAAwBC,mBAAS,CAC/B,CACEC,GAAI,GACJH,KAAM,GACNI,OAAQ,GACRC,UAAW,GACXC,YAAa,GACbC,YAAa,MAPjB,mBAAOC,EAAP,KAAaC,EAAb,KAWA,EAA0BP,mBAAS,IAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KACA,EAA0CT,mBAAS,CAAC,OAAQ,WAA5D,mBAAOU,EAAP,KAAsBC,EAAtB,KASA,EAAkCX,oBAAS,GAA3C,mBAAOY,EAAP,KAAkBC,EAAlB,KACA,EAA8Bb,oBAAS,GAAvC,mBAAOc,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,YACO,uCAAG,kCAAAC,EAAA,6DAChBF,GAAW,GACXF,GAAa,GAFG,kBAKOK,IAAMC,IAAN,qEAC2CC,+MAAYC,oBAN9D,OAWd,IAASC,KANHC,EALQ,OAQVC,EAAW,GACXC,EAAUF,EAAOjB,KAGnBkB,EAASE,KAAK,CACZzB,GAAIwB,EAAQH,GAAMrB,GAClBH,KAAM2B,EAAQH,GAAMxB,KACpBI,OAAQuB,EAAQH,GAAMpB,OACtBC,UAAWsB,EAAQH,GAAMK,UACzBvB,YAAaqB,EAAQH,GAAMM,YAC3BvB,YAAaoB,EAAQH,GAAMO,cAI/BtB,EAAQiB,GAERX,GAAa,GAxBC,kDA0BdE,GAAW,GA1BG,QA4BhBF,GAAa,GA5BG,0DAAH,qDA8BfiB,KACC,IAGH,IAAoBC,EAQd5C,EAAUmB,EAAK,IAAMlB,OAAOC,KAAKiB,EAAK,IAE5C,OACE,eAAC,WAAD,WACE,0CAEA,iCACE,6CACA,uBACE0B,KAAK,OACLC,YAAY,YACZC,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAAW3B,EAAS2B,EAAMC,OAAOH,UAE5C/C,GACCA,EAAQM,KAAI,SAACI,EAAQF,GAAT,OACV,kCACE,uBACEqC,KAAK,WACLM,QAAS5B,EAAc6B,SAAS1C,GAChCsC,SAAU,SAACK,GACT,IAAMF,EAAU5B,EAAc6B,SAAS1C,GACvCc,GAAiB,SAAC8B,GAAD,OACfH,EACIG,EAAKC,QAAO,SAACC,GAAD,OAAQA,IAAO9C,KADxB,sBAEC4C,GAFD,CAEO5C,UAInBA,IAbSF,SAmBjBmB,GAAW,2DAGXF,EACC,8CAEA,8BACE,cAAC,EAAD,CAAW1B,OAlDC6C,EAkDiBzB,EAjD5ByB,EAAKW,QAAO,SAAC9C,GAAD,OACjBc,EAAckC,MACZ,SAAC/C,GAAD,OACED,EAAIC,GAAQgD,WAAWC,cAAcC,QAAQvC,EAAMsC,gBAAkB,iBC/D/EE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.81182216.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./tablestyles.css\";\n\n// npm install --save react-jsx\n\nconst Datatable = ({ dataa }) => {\n  const columns = dataa[0] && Object.keys(dataa[0]);\n  // console.log(dataa);\n  return (\n    <table className=\"dml_table\" cellPadding={0} cellSpacing={0}>\n      <thead>\n        <tr>\n          {dataa[0] &&\n            columns.map((heading, index) => <th key={index}>{heading}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {dataa.map((row) => (\n          <tr key={row.name}>\n            {columns.map((column) => (\n              <td>{row[column]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Datatable;\n","import axios from \"axios\";\nimport React, { Fragment, useState, useEffect } from \"react\";\n// import requests from \"./request\";\nimport Datatable from \"./datatable\";\n\nfunction App() {\n  const [data, setData] = useState([\n    {\n      id: \"\",\n      name: \"\",\n      origin: \"\",\n      Life_span: \"\",\n      Description: \"\",\n      Temperament: \"\",\n      // Weight: '',\n    },\n  ]);\n  const [query, setQuery] = useState(\"\");\n  const [searchColumns, setSearchColumns] = useState([\"name\", \"origin\"]);\n\n  // const [searchColumns, setSearchColumns] = useState([\n  //   {\n  //     Name: \"\",\n  //     Origin: \"\",\n  //   },\n  // ]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios.get(\n          `https://api.thecatapi.com/v1/breeds?attach_breed=0&api_key=${process.env.REACT_APP_API_kEY}`\n        );\n        let datainfo = [];\n        let catData = result.data;\n\n        for (let info in catData) {\n          datainfo.push({\n            id: catData[info].id,\n            name: catData[info].name,\n            origin: catData[info].origin,\n            Life_span: catData[info].life_span,\n            Description: catData[info].description,\n            Temperament: catData[info].temperament,\n          });\n        }\n\n        setData(datainfo);\n        // console.log(data);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  // not all data is string\n  const dataFilter = (rows) => {\n    return rows.filter((row) =>\n      searchColumns.some(\n        (column) =>\n          row[column].toString().toLowerCase().indexOf(query.toLowerCase()) > -1\n      )\n    );\n  };\n  const columns = data[0] && Object.keys(data[0]);\n\n  return (\n    <Fragment>\n      <h1>CAT API </h1>\n\n      <form>\n        <label>Search :</label>\n        <input\n          type=\"text\"\n          placeholder=\"search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        {columns &&\n          columns.map((column, index) => (\n            <label key={index}>\n              <input\n                type=\"checkbox\"\n                checked={searchColumns.includes(column)}\n                onChange={(e) => {\n                  const checked = searchColumns.includes(column);\n                  setSearchColumns((prev) =>\n                    checked\n                      ? prev.filter((sc) => sc !== column)\n                      : [...prev, column]\n                  );\n                }}\n              />\n              {column}\n            </label>\n          ))}\n      </form>\n\n      {/* Error message */}\n      {isError && <div>Something went wrong ...</div>}\n\n      {/* loading data  */}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <div>\n          <Datatable dataa={dataFilter(data)} />\n        </div>\n      )}\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n//  weather api e890ec3e296f4adc88922728211705\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}